"""Bring in all of the public TensorFlow interface into this module."""

from __future__ import absolute_import as _absolute_import
from __future__ import division as _division
from __future__ import print_function as _print_function

import os as _os

# pylint: disable=g-bad-import-order
from tensorflow.python import pywrap_tensorflow  # pylint: disable=unused-import

try:
  # Add `estimator` attribute to allow access to estimator APIs via
  # "tf.estimator..."
  from tensorflow.python.estimator.api import estimator  # pylint: disable=g-import-not-at-top

  # Add `estimator` to the __path__ to allow "from tensorflow.estimator..."
  # style imports.
  from tensorflow.python.estimator import api as estimator_api  # pylint: disable=g-import-not-at-top
  __path__ += [_os.path.dirname(estimator_api.__file__)]
  del estimator_api
except (ImportError, AttributeError):
  print('tf.estimator package not installed.')
from tensorflow._api.v1 import app
from tensorflow._api.v1 import bitwise
from tensorflow._api.v1 import compat
from tensorflow._api.v1 import data
from tensorflow._api.v1 import debugging
from tensorflow._api.v1 import distributions
from tensorflow._api.v1 import dtypes
from tensorflow._api.v1 import errors
from tensorflow._api.v1 import feature_column
from tensorflow._api.v1 import gfile
from tensorflow._api.v1 import graph_util
from tensorflow._api.v1 import image
from tensorflow._api.v1 import initializers
from tensorflow._api.v1 import io
from tensorflow._api.v1 import keras
from tensorflow.python.framework.versions import CXX11_ABI_FLAG as __cxx11_abi_flag__
from tensorflow.python.framework.versions import GIT_VERSION
from tensorflow.python.framework.versions import GIT_VERSION as __git_version__
from tensorflow.python.framework.versions import GRAPH_DEF_VERSION
from tensorflow.python.framework.versions import GRAPH_DEF_VERSION_MIN_CONSUMER
from tensorflow.python.framework.versions import GRAPH_DEF_VERSION_MIN_PRODUCER
from tensorflow.python.framework.versions import MONOLITHIC_BUILD
from tensorflow.python.framework.versions import MONOLITHIC_BUILD as __monolithic_build__
from tensorflow.python.framework.versions import VERSION
from tensorflow.python.framework.versions import VERSION as __version__
from tensorflow.python.ops.array_ops import newaxis
from tensorflow.python.ops.check_ops import ensure_shape
from tensorflow.python.ops.gen_string_ops import regex_replace
from tensorflow.python.ops.logging_ops import print_v2 as print
from tensorflow.python.ops.state_ops import batch_scatter_update
from tensorflow.python.ops.variable_scope import AUTO_REUSE
from tensorflow.python.ops.variable_scope import disable_resource_variables
from tensorflow.python.ops.variable_scope import enable_resource_variables
from tensorflow.python.ops.variable_scope import variable_creator_scope_v1 as variable_creator_scope
_names_with_underscore = ['__version__', '__git_version__', '__compiler_version__', '__cxx11_abi_flag__', '__monolithic_build__']
__all__ = [_s for _s in dir() if not _s.startswith('_')]
__all__.extend([_s for _s in _names_with_underscore])


from tensorflow.python.util.lazy_loader import LazyLoader  # pylint: disable=g-import-not-at-top
contrib = LazyLoader('contrib', globals(), 'tensorflow.contrib')
del LazyLoader
# The templated code that replaces the placeholder above sometimes
# sets the __all__ variable. If it does, we have to be sure to add
# "contrib".
if '__all__' in vars():
  vars()['__all__'].append('contrib')

from tensorflow.python.platform import flags  # pylint: disable=g-import-not-at-top
app.flags = flags  # pylint: disable=undefined-variable

# Make sure directory containing top level submodules is in
# the __path__ so that "from tensorflow.foo import bar" works.
_tf_api_dir = _os.path.dirname(_os.path.dirname(app.__file__))  # pylint: disable=undefined-variable
if _tf_api_dir not in __path__:
  __path__.append(_tf_api_dir)

# These symbols appear because we import the python package which
# in turn imports from tensorflow.core and tensorflow.python. They
# must come from this module. So python adds these symbols for the
# resolution to succeed.
# pylint: disable=undefined-variable
try:
  del python
  del core
except NameError:
  # Don't fail if these modules are not available.
  # For e.g. we are using this file for compat.v1 module as well and
  # 'python', 'core' directories are not under compat/v1.
  pass
# pylint: enable=undefined-variable
